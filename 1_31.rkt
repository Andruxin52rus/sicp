#lang racket

(define (product term-func first-item next-item-func last-item gt-func)
    (define (iter item)
        (if (gt-func item last-item)
        1
        (* (term-func item)
           (iter (next-item-func item)))))
  (iter first-item))

(define (factorial n)
    (define (identity x)
        x)
    (define (next x)
        (+ x 1))
    (define (gt first second)
        (> first second))
    (product identity 1 next n gt))

(factorial 1)
(factorial 2)
(factorial 3)
(factorial 4)
(factorial 5)
(factorial 6)

(define (pi-approx n)
    (define (square x)
        (* x x))
    (define (term x)
        (/ (* x (+ x 2))(square (+ x 1))))
    (define (next x)
        (+ x 2))
    (define (gt first second)
        (> first second))
    (* 4 (product term 2 next (+ 3 (* 2 (- n 1))) gt)))

(pi-approx 1)
(pi-approx 2)
(pi-approx 3)
(pi-approx 4)
(pi-approx 5)
(pi-approx 6)
(pi-approx 60)
(pi-approx 600)